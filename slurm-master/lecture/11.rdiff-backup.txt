И снова здраствуйте.
Сегодня мы поговорим о том, что делать, когда все плохо, и что надо делать, чтобы единственное светлое пятнышко в этот момент не превратилось в абсолютно черное тело.
Да. я говорю о бекапах. Как только человечество научилось копировать информацию - сразу появились первые бекапы.
К сожалению технологии копирования глиняных табличек и узелкового письма утеряны, поэтому поговорим о более современных вещах.

Информация хранится на дисках, а основной способ обеспечения отказоустойчивости - это RAID-массивы. Как минимум везде используется зеркалирование через linux mdraid.
Там где есть железный рейд - используется он. В основном RAID-1 миррор. 
RAID-5 только у самых жадных клиентов, потому что бывали случаи когда после выхода из строя и замены одного из дисков в момент ребилда рейда выходил из строя еще один диск и весь массив уходил в страну вечной охоты.

Первое правило бекапов - делайте бекапы автоматически
Второе правило бекапов - проверяйте, возможно ли провести восстановление из бекапа
Третье правило бекапов - следите за их наличием и актуальностью

В своей работе мы сталкиваемся со следующими видами бекапов:
- бекап баз данных
- бекап больших объемов статических файлов
- бекап инфраструктуры
- бекап кода
- бекап контейнеров OpenVZ
- бекап виртуальных машин

1. Бекапы баз данных.
Особенности:
- делаются встроенными средствами или специализированными утилитами.
- время восстановления может занимать несколько часов
- различные варианты хранения данных

Самыми популярными БД, из тех, с которыми мы постоянно сталкиваемся, являются PostgreSQL, MySQL, MongoDB.
Основной способ обеспечения отказоустойчивости и восстановления после аварии является конечно же технологии репликации и кластеризации.
Для PostgreSQL используется репликация мастер-слейв, для клиентов, которые желают обеспечить своему сервису повышенную отказоустойчивость поднимаем автоматическую репликацию из трех серверов, причем на одном из слейвов используем репликацию с задержкой, чтобы иметь возможность оперативно восстановится по технологии Point-In-Time-Recovery. 

Для MySQL только репликация мастер-слейв, в единичных случаях XtraDB кластер, с записью на один сервер.

MongoDB - как современная база уже умеет кластеризироваться самостоятельно и без костылей.

Репликация позволяет без проблем пережить выход серверов из строя. Но не решает задачи восстановления случайно удаленной информации.
Для этих целей делаются бекапы данных в SQL-формате и бекапы коллекция для монго.
Бекапы разделяются на месячные, недельные и дневные - по дате создания (1 число, понедельник, каждый день) и хранятся каждый свой промежуток времени.
Как правило мы к этим бекапам обращаемся по просьбе клиента восстановить какую-либо таблицу. Восстанавливать БД размером в сотни мегабайт из таких архивов как правило очень долгая операция. Поэтому только репликация.

Так же существуют утилиты, которые умеют копировать целиком каталог с данными сервера, обеспечивая сохранение консистентности.
Но мы их не используем для бекапа, только для горячего добавления слейвов в репликацию.

2. Бекапы больших объемов статических файлов.

Большие объемы - это десятки и сотни гигабайт. Как правило - это различные фотографии, музыка и прочий бинарный контент. И такие файлы только добавляются к хранилищу.
Операции удаления устаревших файлов обычно проводятся в рамках периодического обслуживания.
Для раздачи таких объемов организуются несколько отдельных серверов в различных датацентрах и хостерах(CDN на коленке), каждый из которых содержит полную копию данных. Таким образом данные в работе, и в нескольких копиях. каких-либо дополнительных бекапов не требуется. при аварии с одним из серверов всегда можно взять копию с живого.
Ну или покупается услуга CDN.

3. Бекап инфраструктуры и бекап кода.
Под бекапом инфраструктуры я имею в виду концепцию Инфраструктура как код, когда нам проще поднять новый сервер, чем восстанавливать упавший.
Потому что у нас все ходы записаны и создать новый экземпляр виртуального сервера можно запустив наши сценарии создания серверов.
Естественно эти сценарии хранятся в системах контроля версий.
С кодом проектов все точно также. весь код проектов должен хранится в системах контроля версия. в git.

4. Бекап контейнеров openVZ и виртуальных машин.

Мы любим openVZ - это легковесная система контейнеризации, которая позволяет запускать на одном сервере много линукс-машин. У нее есть свои недостатки, большинство из которых проистекают из ее преимуществ, но для целей хостинга она подходит идеально.
Контейнеры в openVZ лежат в каталоге /vz/private и представляют из себя обычную файловую систему. при старте контейнера /vz/private/1/ монтируется как корневой каталог сервера, запущенного в контейнере 1.

Для создания бекапа достаточно сделать копию каталога /vz/private/1

Для создания таких бекапных копий мы используем утилиту rdiff-backup
Ее плюсы:
- умеет инкрементальные бекапы
- умеет сохранять локально и на удаленный сервер
- умеет Exclude и Include файлов и каталогов в бекапе. Система немного запутанная, но если ее понять, то можно пользоваться
- сохраняет права и владельцев файлов
- хранит самую свежую копию как есть - можно сразу скопировать файл
- умеет восстанавливать отдельные файлы и каталоги из бекапа на любую точку инкрементального бекапа

Как работает исключение файлов при бекапе:
Опции --exclude и --include

1. По умолчанию файл включается в бекап.
2. Сравнивается полный путь к файлу с паттерном в опции 
Пример:  --include /usr/loca/bin 
Включает в бекап /usr/local/bin/file1 

3. Опции сравниваются по порядку и первое совпадение прекращает поиск
Пример: --include /usr/local/bin --exclude /usr/local
Включает в бекап /usr/local/bin/file1 
Выключает из бекапа /usr/local/doc (собственно все что внутри каталога /usr/local, кроме содержимого /usr/local/bin/)

Шаблоны выбора
* - любая последовательность символов, кроме / (название одного каталога или файла)
** - вообще любая последовательность символов
? - один символ, кроме /
[...] - набор символов, указанных в квадратных скобках.

Наши скрипты бекапа сохраняют все контейнеры в /vz/private/???, но по умолчанию в бекап не включаются кеши, логи, временные файлы и каталоги БД:
EXCLUDE=" **/tmp/** **/logs/** **/log/** **/proc/** **/cache/** **/managed_cache/** **/var/lib/php/session/** **/var/lib/slack/** **/var/cache/slack/** **/var/cache/yum/** **/httpd-logs/** **/var/lib/nginx/** **/var/spool/postfix/** **/var/lib/mysql/** **/var/lib/pgsql/** **/var/lib/mongo/** **/var/lib/docker/**  **/var/lib/yum/** "

Виртуальные машины разделяются на организованные хостером и организованные нами самостоятельно.
Для машин, организованных хостером как правило бекапы делаются средствами, предоставляемыми хостером (Снепшоты - Amazon, GoogleCloude, Selectel).
Машины, организованные нами самостоятельно (kvm-виртуалки), как правило используются в системе Инфраструктура как код и их проще с нуля создать, чем поднимать из бекапа.
но! для обеспечения возможности восстановить какие-либо отдельные файлы мы также делаем бекап содержимого с помощью rdiff-backup.
Единственное отличие, от бекапов контейнеров openVZ, то что если контейнер сразу восстанавливается готовым к использованию, то из бекапа виртуалки придется руками доставать нужные файлы и перекладывать в новую.

Приступим к практическим занятиям, сейчас мы:
- сделаем локальный бекап каталога и посмотрим на его размер
- Изменим там файлы, добавим файлов и сделаем еще один бекап
- Восстановим файлы из бекапа для обоих бекапов
- Сделаем бекап, исключив из него несколько файлов и каталогов
- Настроим удаленный сервер и отправим бекап не него.
- Восстановимся с удаленного сервера

yum install rdiff-backup
rdiff-backup /srv/www /backup

rdiff-backup -r 2018-10-05T19:45:38+03:00 /backup/rpmbuild/RPMS /home/vz.restore/
rdiff-backup -r 2D /backup/rpmbuild/RPMS /home/vz.restore/

Настройка доступа к удаленному серверву для сохранения на нем бекапов:
создаем юзера
даем ему авторизацию по ключам
настраиваем автозапуск при логине rediff-backup --server

authorized_keys
command="rdiff-backup --server --restrict vzbackups",no-port-forwarding,no-X11-forwarding,no-pty 

rdiff-backup /home/vz tt@localhost::vzbackups

Обратите внимание на опцию --restrict. при записи бекапа бекапы можно будет слать только в каталог vzbackups - затереть что то другое не получится

Дополнительные команды, которые могут понадобится:

Удаление инкрементальных бэкапов
rdiff-backup --force --remove-older-than 14D /backup

Просмотр размеров занимаемых инкрементых бэкапов
rdiff-backup --list-increment-size /backup

Исправление локального бэкапа для контейнера 1
rdiff-backup --check-destination-dir /backup

Известные проблемы
Наличие большого файла в который постоянно идет запись
Если в бекапе присутсвует большой файл и в него идет постоянная интенсивная запись, то файл не попадет в бекап и в логе будет ошибка вида:

UpdateError home/alex/a/gis_ok.txt Updated mirror temp file vzbackups/9/home/alex/a/rdiff-backup.tmp.7 does not match source
