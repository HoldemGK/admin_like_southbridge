Здравствуйте.
Тема лекции - сборка и управление пакетами в Centos.

Что же такое пакет (packacge) в Centos ? 
Это файл, в котором распространяется программное обеспечение.
Формат создан RedHat, файл этого формата имеет расширение rpm, что раскрывается как
RedHat Packet Manager. Конечно же rpm-пакеты применяются не только в Centos, в первую очередь конечно же
в RedHat Enterprise Linux, Fedora, Centos и во многих других дистрибутивах. Они, собственно, так и называются
rpm-based.

Внутри rpm-пакета содержатся:
архив с файлами программного обеспечения
скрипты, которые будут выполнены перед и после установки или удаления пакета
Различная мета-информация:
- версия
- какие библиотеки нужны для работы
- что предоставляет
- какие пакеты заменяет, а с какими конфликтует
- описание пакета
- история изменений
- где и когда собран пакет

Как это не странно, для работы с пакетами .rpm  используется программа RPM
С помощью RPM можно установить, обновить или удалить прогаммное обеспечение из .rpm-пакета.
Проверить установленное, посмотреть версию и список установленных файлов.

Но RPM работает с единичными пакетами .rpm, что очень неудобно, сначала надо найти и скачать .rpm пакет с ПО, потом из информации в пакете узнать список софта, от которого зависит то, что нам надо, скачать .rpm пакеты с зависимостями, получить список уже их зависимостей и т.д. 

Поэтому в нормальных дистрибутивах используют оболочки для RPM, обеспечивающие работу с репозиториями пакетов.
в Centos это yum.
Yum решает следующие задачи:
- поиск пакетов в репозиториях
- установка пакетов из репозиториев
- установка пакетов из .rpm-файлов, с удовлетворением зависимостей с помощью репозиториев
- обновление системы
- удаление ненужных пакетов
- даунгрейд пакетов

Установка пакета yum-utils существенно расширяет возможности yum по манипуляциям с пакетами.

Название rpm пакета подчиняется определенным правилам:

<название>-<версия>-<релиз>.<архитектура>.rpm

nginx-1.15.0-1.el6.ngx.x86_64.rpm
mysql-router-2.0.3-1.el6.x86_64.rpm
mysql-5.5.61-1.el6.remi.x86_64.rpm
maxscale-2.2.5-1.rhel.6.x86_64.rpm
curl-7.58.0-6.0.cf.rhel6.x86_64.rpm
python27-2.7.13-1.ius.centos6.x86_64.rpm

Название программы;
Версия программы;
Релиз - Номер выпущенной версии (количество раз пересборки программы одной и той же версии). Также часто используется для обозначения дистрибутива, под который собран этот пакет, например, mdv (Mandriva Linux) или fc4 (Fedora Core 4) - как видно из реальной жизни туда пишут все что угодно, лишь бы было понятно
Архитектура, под которую собран пакет (i386, ppc, x86_64 и специальный вид src - для пакета в котором лежат исходники и инструкция по сборке) 

Что такое rpm-пакет мы вспомнили, перейдем теперь к технологии создания rpm-пакета.
Мы продолжим в режиме практики, по результатам котороы вы будете уметь собирать пакеты из готовых спецификаций, добавлять и менять пакеты под свои потребности, создавать свои спецификации, подписывать пакеты и создадим свой репозиторий.

В мануалах обычно не советуют запускать сборку пакетов от рута, так как при сборке есть опасность повредить систему.
но в век виртуальных машин  - мне проще поднимать сборочную виртуалку из готового образа и собирать от рута.

Для начала поставим софт, необходимый для сборки, в Centos это можно сделать командой установки группы софта:

yum groupinstall 'Development tools'

В эту группу входят rpm-build, automake, autoconf, компилятор си, си++\\

\\ Создание структуры каталогов, 
Так же, если вы начинаете создавать сборку с нуля необходимо создать структуру каталогов:

~/rpmbuild
|-- BUILD  - тут сборка
|-- BUILDROOT - сюда происходит установка
|-- RPMS  - тут готовые rpm
|   |-- i586
|   |-- x86_64
|   `-- noarch
|-- SOURCES - тут исходники
|-- SPECS - тут .spec
`-- SRPMS - тут rpms

Для сборки пакета нам нужны две вещи - исходники и инструкция по сборке.
Как я уже упоминал при описании структуры названия .rpm-пакета, существуют специальные src.rpm пакеты, включающие в себя исходники и готовую инструкцию по сборке.
Имея такой пакет можно легко пересобрать пакет самостоятельно.

Давайте начнем с такой жизненной задачи: Под Centos требуется nginx c поддержкой протокола HTTP/2.
Погуглив мы узнаем, что спецификации этого протокола динамично менялись и в современной версии для поддержки HTTP/2 требуется наличие OpenSSL версии 1.0.2 и выше.
До недавнего времени в Centos7 у нас был OpenSSL версии 1.0.1, правда в версии 7.4 они успешно заменили openssl на версию 1.0.2, но ведь есть centos6, где openssl уже не будут обновлять. а использовать HTTP/2 там хочется.

окей. Погуглив еще чуток находим на сайте nginx статью "Supporting HTTP/2 for Website Visitors" из которой узнаем, что можно собрать свой nginx, указав ему при сборке нужную версию openssl. 
Отлично, ну что ж, приступим.
- поиск .src.rpm 
  Заходим на сайт nginx, Downloads, готовые пакеты - видим что для удобства нам предлагают поставить репозиторий nginx. Отлично. обычно src.rpm лежит в том же репозитории в каталоге SRPMS и репозиторий можно просмотреть просто браузером
http://nginx.org/packages/mainline/centos/7/SRPMS/nginx-1.15.5-1.el7_4.ngx.src.rpm

Скачиваем и устанавливаем
rpm -ivh http://nginx.org/packages/mainline/centos/7/SRPMS/nginx-1.15.5-1.el7_4.ngx.src.rpm
Смотрим что получилось - при установке нам создали каталог rpmbuild и внутри SPECS и SOURCES. в каталоги соотвественно положили инструкцию по сборке и исходники.
Также нам нужен будет исходник openssl - идем на сайт и скачиваем последнюю версию 1.0.2p

Теперь пора приступать к внесению дополнений в инструкцию по сборке -  копируем nginx.spec в nginx.ssl102p.spec и открываем его на редактирование
Оу. видим знакомые буквы. Куча define - настройка параметров для сборки. Обратит внимание на os_minor >=4 т.е. если версия больше 7.4 то требуем наличия openssl 1.0.2
но мы уже решили собрать со своей версией, так что вперед на мины

Добавляем:
Source99: openssl-1.0.2p.tar.gz

tar xvzf %SOURCE99

%define BASE_CONFIGURE_ARGS ... --with-openssl=./openssl-1.0.2o

rpmbuild -ba nginx.ssl102p.spec

-ba ключи которое говорят, что надо собрать пакет с программой и пакет с исходным кодом.

О. вылетел с ошибкой. Читаем, супер.
/usr/bin/ld: ./openssl-1.0.2p/.openssl/lib/libssl.a(s23_meth.o): relocation R_X86_64_32 against `.rodata' can not be used when making a shared object; recompile with -fPIC

 нам сразу подсказывают что надо собирать openssl с опцией -fPIC
Еще немножко поиска по документации подсказывает нам, что надо прописать вот так: --with-openssl-opt=-fPIC
Запускаем сборку, собрали, поставили пакет - показали версию nginx -V

Давайте теперь попробуем собрать что-нибудь более сложное
Для первоначальной защиты от DDOS мы используем модуль nginx testcoockie, его логика работы примерно такая же как у CloudFlare.
При включенном модуле вместо сайта сначала отображается специальная легковесная страничка, которая через пару тройку секунд устанавливает куку и возвращает редирект на сайт. При входе с установленной кукой модуль пропускает запрос напрямую на сайт.
Кука может выдаваться nginx, а может генерироваться js-скриптом в браузере пользователя. Идея защиты в том, что DDOS скрипты не анализируют ответы от сервера,
и тем более не имеют средств выполнить js скрипт и получить уникальное значение куки.

Идем на https://github.com/kyprizel/testcookie-nginx-module и читаем доку. Начиная с версии 1.9.11 nginx поддерживает динамические модули, и теперь модули можно собирать отдельными пакетами и подгружать их по мере необходимости.
Инструкция по сборке выглядит просто - скачиваем исходники, конфигурируем с опцией --add-dynamic-module и собираем.
Отлично. мы почти готовы к сборке, но не совсем...
Давайте схитрим и скачаем src-пакет какого нибудь простого модуля для nginx - например geoip
rpm -ivh http://nginx.org/packages/mainline/centos/7/SRPMS/nginx-module-geoip-1.15.5-1.el7_4.ngx.src.rpm
И будем использовать его как основу для своего собственного .spec файла для сборки модуля testcookie
Готовим исходники:
git clone https://github.com/kyprizel/testcookie-nginx-module
mv testcookie-nginx-module testcookie-nginx-module-1.24
Читаем доку еще раз - нам нужен aes.js https://code.google.com/archive/p/slowaes/source/default/source?page=3
пропатченный. скачиваем, патчим - не патчится, правим руками.

tar --exclude-vcs -czvf testcookie-nginx-module-1.24.tar.gz testcookie-nginx-module-1.24
Кладем SOURCE
правим .spec

%define module_testcookie_version         1.24
%define module_testcookie_release         1%{?dist}.ngx

> Name: nginx-module-testcookie
> Version: %{main_version}.%{module_testcookie_version}
> Release: %{module_testcookie_release}
> Requires: nginx = %{?epoch:%{epoch}:}%{main_version}-%{main_release}
> Summary: nginx testcookie module

> Source99: openssl-1.0.2p.tar.gz
> Source100: testcookie-nginx-module-%{module_testcookie_version}.tar.gz

> %description
> Dynamic testcookie module for nginx.

> %define BASE_CONFIGURE_ARGS  --with-openssl=./openssl-1.0.2p --with-openssl-opt=-fPIC --with-compat 

> %define MODULE_CONFIGURE_ARGS $(echo "--add-dynamic-module=testcookie-nginx-module-%{module_testcookie_version}")

> tar xvzf %SOURCE99
> tar xvzf %SOURCE100

> %{_datadir}/%{name}/aes.min.js

> %{__mkdir} -p $RPM_BUILD_ROOT%{_datadir}/%{name}
> %{__install} -m644 %{bdir}/testcookie-nginx-module-%{module_testcookie_version}/aes.min.js $RPM_BUILD_ROOT%{_datadir}/%{name}/


The testcookie dynamic module for nginx has been installed.
To enable this module, add the following to /etc/nginx/nginx.conf
and reload nginx:

load_module modules/ngx_http_testcookie_access_module.so;

see doc at: https://github.com/kyprizel/testcookie-nginx-module
For using client-side cookie decryption use aes.min.js in /usr/share/nginx-module-testcookie

%changelog
* Tue Dec 13 2016 Sergey Bondarev <s.bondarev@southbridge.ru>
- testcookie dynamic module

проверка 
load_module modules/ngx_http_testcookie_access_module.so;
testcookie on;

Лирическое отступление:
Зачем вообще собирать пакеты ?
Во первых когда у тебя даже десяток серверов, собирать нужную версию софта на каждом из них просто глупо.
Но даже не это главное, при установке RPM сохраняет информацию об установленных бинарниках и их контрольных суммах.
На серверах под нашим управлением периодически запускается автоматическая проверка всех файлов, установленных из пакетов и бьет тревогу, если у них поменялись контрольные суммы.

Далее сборка с нуля. упаковываем arcconf
https://tech4fun.ru/2017/10/17/adaptec-arcconf-in-centos-7/
Скачиваем, распаковываем:
http://download.adaptec.com/raid/storage_manager/asm_linux_x64_v6_50_18579.tgz
Проходим по полям....
Добавляем зависимость.


Создаем свой репозиторий, подписываем пакеты.
Как вы уже видели на примере репозитория nginx - репозиторий rpm пакетов - это обычный сайт, на котором лежат пакеты, а также есть каталог repodata
в этом каталоге лежат индексы репозитория, индексы создаются командой createrepo
Также считается хорошим тоном защищать пакеты, которые вы выкладываете в собственном репозитории от подмены с помощью цифровой подписи.

Давайте создадим цифровую подпись, подпишем ей собранные нами пакеты и создадим репозиторий.
 
GPG-подпись  -  стандартный  механизм  подписи  пакетов  RPM.  Для его    использования необходимо сделать следующее:
    1. Сгенерировать пару GPG-ключей.
    2. Добавить данные желательной подписи в конфиг RPM
    3. Подписать пакет.
    4. Экспортировать  публичный  ключ  и  выложить  его  в общедоступное место.

gpg --gen-key

gpg --list-keys

cat <<EOT > ~/.rpmmacros
%_signature gpg
%_gpg_name redslurm
EOT

Подписать пакеты:
rpm --resign *

Экспортировать публичный ключ
gpg --export --armor redslurm > RPM-GPG-KEY-student

Создаем пакет пакет для установки конфига репзитория
student.spec

Создаем репозиторий.
конфиг для nginx
mkdir -p x86_64
yum install createrepo
createrepo x86_64
