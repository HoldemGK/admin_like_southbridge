#!/bin/bash
# THIS FILE IS MANAGED BY SLACK, ALL CHANGES WILL BE LOST
#
# iptables.ssh      Start iptables firewall custom chain for SSH service
#
# chkconfig: 2345 09 91
# description:  Starts, stops and reload {{ admin_iptables_chain }} chain for iptables firewall
#
# config: /etc/ssh.iptables.cfg
#
### BEGIN INIT INFO
# Provides: iptables.ssh
# Required-Start: iptables
# Required-Stop:
# Default-Start: 2 3 4 5
# Default-Stop: 0 1 6
# Short-Description: start and stop iptables.ssh chain for iptables firewall
# Description: Start, stop and reload iptables.ssh chain for iptables firewall
### END INIT INFO

# Source function library.
. /etc/init.d/functions

set -o nounset
set -E

readonly PATH=/bin:/sbin:/usr/bin:/usr/sbin
readonly bn=$(basename $0)
readonly hn=$(hostname)

# Configuration
readonly chain="iptables.ssh"
typeset -ir dstport=22
typeset -ar Hardcoded=( "144.76.88.101/32" "188.166.122.96/32" )
typeset -ir redhat_distribution_major_version=$(awk '{ match($0,"[.0-9]+",a) } END { print int(a[0]) }' /etc/redhat-release)
readonly whitelist="/etc/ssh.iptables.cfg"
readonly whitelist_local="/etc/ssh.iptables.local.cfg"
readonly exclhost="/etc/ssh.exclhost.cfg"

if (( redhat_distribution_major_version > 6 )); then
    readonly w="--wait"
else
    readonly w=""
fi

trap except ERR

start() {
    local FN=$FUNCNAME

    if iptables-save | fgrep -q ":$chain"; then
        return
    else
        iptables $w -N $chain
        reload
    fi
}

reload() {
    local FN=$FUNCNAME

    if [[ ! -f "$whitelist" ]]; then
        echo "${bn}: main configuration file is missing" 1>&2
        false
    fi

    if ! iptables-save | fgrep -q ":$chain"; then
        echo "${bn}: chain '$chain' not found" 1>&2
        false
    fi

    echo -n $"iptables.ssh: Applying firewall rules: "
    iptables $w -F $chain
    iptables $w -A $chain -m addrtype --src-type LOCAL -j ACCEPT

    for src in ${Hardcoded[*]}; do
        iptables $w -A $chain -s $src -j ACCEPT
    done

    for file in $whitelist $whitelist_local; do
        if [[ -f $file ]]; then
            for src in $(egrep -v '^#|^$|^\s+$' $file | awk '{ print $1 }' | sort | uniq); do
                iptables $w -A $chain -s $src -j ACCEPT
            done
        fi
    done

    if [[ -f $exclhost ]]; then
        if ! fgrep -q "$hn" $exclhost; then
            iptables $w -A $chain -p tcp -j REJECT --reject-with tcp-reset
        fi
    fi

    removejump
    iptables $w -I INPUT $(find_insert_position) -m tcp -p tcp --dport $dstport -j $chain
    success; echo
}

removejump() {
    if (( redhat_distribution_major_version > 6 )); then
        iptables-save | awk -v chain="-j $chain" '$0 ~ chain { sub(/-A/, "-D"); system("iptables --wait "$0) }'
    else
        iptables-save | awk -v chain="-j $chain" '$0 ~ chain { sub(/-A/, "-D"); system("iptables "$0) }'
    fi
}

# Если есть правило с ESTABLISHED - то вставляем после него, если нет - в начало
find_insert_position() {
    local FN=$FUNCNAME
    local -i pos=0

    pos=$(iptables-save -t filter | fgrep -- '-A INPUT' | awk '/ESTABLISHED/ { print NR + 1; exit }')

    if (( pos )); then
        printf "%i" $pos
    else
        printf "%i" 1
    fi
}

stop() {
    echo -n $"iptables.ssh: Unloading firewall rules: "
    removejump
    iptables $w -F $chain 2>/dev/null || true
    iptables $w -X $chain 2>/dev/null || true
    success; echo
}

status() {
    local FN=$FUNCNAME

    if iptables-save | fgrep -q ":$chain"; then
        iptables $w -t filter -n -v -L $chain
    else
        echo "${bn}: chain '$chain' not found" 1>&2
        exit 1
    fi
}

except() {
    local RET=$?

    failure; echo;
    stop
    echo "ERROR: service $bn failed in function '$FN'" 1>&2
    exit $RET
}

usage() {
    echo "Usage: $bn start | stop | reload | restart | status"
}

case "${1:-NOP}" in
    start) start
        ;;
    stop) stop
        ;;
    reload) reload
        ;;
    restart) stop; start
        ;;
    status) status
        ;;
    *) usage
esac

exit 0


